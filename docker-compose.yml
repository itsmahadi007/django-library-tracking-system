services:
  pg_db:
    image: postgres:13
    platform: linux/amd64
    env_file:
      - .env
    environment:
      - POSTGRES_USER=library_user
      - POSTGRES_PASSWORD=library_password
      - POSTGRES_DB=library_db
    command: -p 5438
    ports:
      - 5438:5438
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    networks:
      - app_network

  redis:
    image: redis:7-alpine
    platform: linux/amd64
    env_file:
      - .env
    command: --port ${REDIS_PORT}
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    restart: always
    networks:
      - app_network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - DJANGO_RUNNING_IN_DOCKER=True
    depends_on:
      - redis
      - pg_db
    volumes:
      - .:/app/backend
    ports:
      - "8000:8000"
    env_file:
      - .env
    restart: always
    networks:
      - app_network
    command: sh -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"

  celery_worker:
    build:
      context: ./
      dockerfile: Dockerfile
    command: celery -A library_system worker --loglevel=info
    environment:
      - DJANGO_RUNNING_IN_DOCKER=True
      - CELERY_BROKER_URL=redis://redis:${REDIS_PORT}/0
      - CELERY_RESULT_BACKEND=redis://redis:${REDIS_PORT}/0
    depends_on:
      - redis
      - pg_db
      - app
    volumes:
      - .:/app/backend
    env_file:
      - .env
    restart: always
    networks:
      - app_network

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A library_system beat --loglevel=info
    environment:
      - DJANGO_RUNNING_IN_DOCKER=True
      - CELERY_BROKER_URL=redis://redis:${REDIS_PORT}/0
      - CELERY_RESULT_BACKEND=redis://redis:${REDIS_PORT}/0
    depends_on:
      - redis
      - pg_db
      - app
    volumes:
      - .:/app/backend
    env_file:
      - .env
    restart: always
    networks:
      - app_network


networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
